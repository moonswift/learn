1、typedef
	typedef 原类型   新类型;
	
2、结构体
	typedef struct 结构体名{
		类型  成员1;
		类型  成员2;
		...
		类型  成员n;
	}strc_t;
	
	定义变量:
		struct 结构体名 变量名;
		strc_t  变量名;
		
	定义指针：
		struct 结构体名 *指针变量名;
		strc_t  *指针变量名;
		
	访问结构体成员:
		变量.成员
		指针->成员  《==》(*指针).成员
		
3、malloc: 动态分配内存
	#include <stdlib.h>

    void *malloc(size_t size);
    void free(void *ptr);
	
	注： 
		1) 成功：返回值为分配空间首地址，失败：NULL
		2) malloc分配空间未初始化
		3) size值一般为存放数据的整数倍：n*sizeof(类型)
		4) malloc返回值为void*，使用时最好强转成指定类型再使用
		5) malloc使用完毕，需要free，free的指针必须是malloc的返回值
		6) free后的指针需要指向NULL
		
4、数据结构
	程序 = 数据结构 + 算法
	
	数据结构:
		逻辑结构(跟存储无关)：
			线性关系:
				除了头节点和尾节点之外，其他节点都只有一个直接前驱和直接后继
				头节点没有前驱，尾节点没有后继
			非线性关系: 
				树形结构：一对多，除了根节点和叶子节点，其他节点都只有唯一前驱，多个后继
						根节点没有前驱，叶子节点没有后继
				图形结构：多对多，所有节点都可以有多个前驱和多个后继
		存储结构(跟存储有关)：
			顺序存储：在内存中连续存储
			链式存储: 在内存中零散存储
			索引存储
			散列存储(Hash)
		操作： 
			增加、删除、修改、查询、排序.....
			
	算法:
		时间复杂度: 语句的频度之和(T)
		空间复杂度: 程序执行过程中所需存储空间的多少
		
5、线性表: 顺序表
	线性表: 指的是逻辑结构,在逻辑上呈现线性关系：1对1
	顺序表: 在逻辑上线性关系, 在内存上连续存储
	
	#define SIZE 100
	typedef int data_t;
	
	typedef struct{
		data_t data[SIZE];   // 顺序表
		int len;  //表尾指针: 最后一个有效元素的下标 
	}sqlist_t;
	
	sqlist_create();   //创建一张表
	sqlist_destory();  //删除表
	//增、删、改、查.....
	
	优点： 简单，查找方便
	缺点： 需要一片较大的连续空间
			插入和删除需要移动空间，尤其是在头部插入删除
	
6、线性表：链式表
	链表: 在逻辑上线性关系，在内存上是散列存储
	
	节点： 数据域 + 指针域(存放下一个节点的地址，如果没有下一个节点则为NULL)
		
	有头链表和无头链表
	
	链表节点的地址存放在上一个节点的指针域next中，所以节点指针为p时，下一个节点的地址为p->next
	
7、单向循环链表：
	1）保证最后一个节点的指针域指向头节点
	2）遍历时结束标志为头节点
	3）循环删除时，注意不要删除头节点

		

	

	
